{"version":3,"file":"Full-Screen.svelte-89797bc9.css","sources":["../../../../../P5Canvas.svelte","../../../../../Full-Screen.svelte"],"sourcesContent":["<script context=\"module\" lang=\"ts\"></script>\n<script lang=\"ts\">import { onMount, onDestroy } from \"svelte\";\n// export let src;\nexport let sketch;\nexport let id = \"sketchXX\";\nexport let p5Version = \"1.0.0\";\nexport let width = \"100%\";\nexport let height = \"100%\";\nlet myp5 = null;\nfunction sketchStarted() {\n    var div = document.getElementById(id);\n    for (var i = 0; i < div.childNodes.length; i++) {\n        var foundCanvas = div.children[i].className == \"p5Canvas\";\n        if (foundCanvas) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction tryStartSketch() {\n    try {\n        if (p5 && sketch && !sketchStarted()) {\n            myp5 = new p5(sketch, id);\n        }\n    }\n    catch (ex) {\n        // catch gracefully\n    }\n}\nonMount(() => {\n    var interval = setInterval(() => {\n        tryStartSketch();\n        var started = sketchStarted();\n        if (started) {\n            clearInterval(interval);\n        }\n    }, 100);\n});\nonDestroy(() => {\n    if (myp5 != null && myp5.remove) {\n        myp5.remove();\n    }\n});\n</script>\n\n<style>\n  div {\n    margin: 0px 0px;\n  }\n</style>\n\n<svelte:head>\n  <script src=\"/content/blog/js/p5.{p5Version}.min.js\"></script>\n</svelte:head>\n<div {id} style=\"position: relative; width: {width}; height: {height}\" />\n","<script>\n  import {\n    setQueryParamWithHistory,\n    deleteQueryParam,\n    getQueryParam\n  } from \"../helpers/window-helper\";\n\n  import { onMount } from \"svelte\";\n  export let reloadSlotOnToggle = true;\n\n  onMount(() => {\n    overlay = getQueryParam(\"full-screen\") == \"1\";\n\n    window.addEventListener(\"popstate\", event => {\n      // console.log(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n      overlay = getQueryParam(\"full-screen\") == \"1\";\n    });\n  });\n  let overlay = false;\n  let reload = false;\n  function toggleFullScreen() {\n    overlay = !overlay;\n    if (overlay) {\n      setQueryParamWithHistory(\"full-screen\", \"1\");\n    } else {\n      deleteQueryParam(\"full-screen\");\n    }\n    if (reloadSlotOnToggle) {\n      reload = !reload;\n    }\n  }\n</script>\n\n<style>\n  .fullscreen-wrapper {\n    position: relative;\n    width: 100%;\n    height: 250px;\n    /* background-color: red; */\n  }\n  .fullscreen-wrapper.overlay {\n    background-color: #f5f5f5;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 1000;\n  }\n\n  .overlay-button.overlay {\n    position: absolute;\n    bottom: 10px;\n    left: 10px;\n    z-index: 1001;\n  }\n</style>\n\n<div class=\"fullscreen-wrapper\" class:overlay>\n  <!-- reload slot when toggled -->\n  {#if reload}\n    <slot />\n  {:else}\n    <slot />\n  {/if}\n</div>\n<button class=\"overlay-button\" class:overlay on:click={toggleFullScreen}>\n  FULL SCREEN MODE\n</button>\n"],"names":[],"mappings":"AA8CE,GAAG,cAAC,CAAC,AACH,MAAM,CAAE,GAAG,CAAC,GAAG,AACjB,CAAC;ACdD,mBAAmB,eAAC,CAAC,AACnB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AAEf,CAAC,AACD,mBAAmB,QAAQ,eAAC,CAAC,AAC3B,gBAAgB,CAAE,OAAO,CACzB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,AACf,CAAC,AAED,eAAe,QAAQ,eAAC,CAAC,AACvB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,IAAI,CACV,OAAO,CAAE,IAAI,AACf,CAAC"}