import{S as t,i as e,s as n,c as r,a,k as o,g as s,p as i,n as m,r as c,u as $,v as l,j as f,t as d,e as p,h,d as g,f as u,o as w}from"./start-35854c27.js";import{P as y,a as v}from"./Post-Contents.svelte-39c77b65.js";import{P as b}from"./PrismJS.svelte-f1a0ed0d.js";import{C as x}from"./Callout.svelte-1a07ef09.js";import{V as T}from"./Vimeo.svelte-f5890640.js";import{G as j}from"./Gallery.svelte-1e30ffa7.js";import{P as I}from"./Post-Section.svelte-035fd7aa.js";import"./Post-Tags-Projects.svelte-aa368aff.js";import"./Icon.svelte-e37e0d5e.js";import"./free-solid-svg-icons-650f6a7f.js";function R(t){let e;return{c(){e=d("In the above example the only thing being manipulated is the objects\r\n    position and rotation (The animations are happening automagically)")},l(t){e=h(t,"In the above example the only thing being manipulated is the objects\r\n    position and rotation (The animations are happening automagically)")},m(t,n){m(t,e,n)},d(t){t&&f(e)}}}function A(t){let e,n,r,a;return{c(){e=d("First we need to load a Mecanim\r\n    "),n=p("strong"),r=d("Animator->Controller"),a=d("\r\n    and a model to attach an Animator component onto.")},l(t){e=h(t,"First we need to load a Mecanim\r\n    "),n=g(t,"STRONG",{});var o=u(n);r=h(o,"Animator->Controller"),o.forEach(f),a=h(t,"\r\n    and a model to attach an Animator component onto.")},m(t,o){m(t,e,o),m(t,n,o),w(n,r),m(t,a,o)},d(t){t&&f(e),t&&f(n),t&&f(a)}}}function S(t){let e;return{c(){e=d("We can see that there are a few states and variables included in this\r\n    controller.")},l(t){e=h(t,"We can see that there are a few states and variables included in this\r\n    controller.")},m(t,n){m(t,e,n)},d(t){t&&f(e)}}}function C(t){let e,n;return e=new b({props:{language:"csharp",code:t[0]}}),{c(){r(e.$$.fragment)},l(t){o(e.$$.fragment,t)},m(t,r){i(e,t,r),n=!0},p(t,n){const r={};1&n&&(r.code=t[0]),e.$set(r)},i(t){n||(c(e.$$.fragment,t),n=!0)},o(t){$(e.$$.fragment,t),n=!1},d(t){l(e,t)}}}function G(t){let e;return{c(){e=d("This is the difference between this frames transform and the previous\r\n      frames transform.")},l(t){e=h(t,"This is the difference between this frames transform and the previous\r\n      frames transform.")},m(t,n){m(t,e,n)},d(t){t&&f(e)}}}function k(t){let e,n,r;return{c(){e=p("strong"),n=d("MinMovementAmount"),r=d("\r\n      - This variable can be changed in order to get the desired effect. I found\r\n      that a value of 1 produced good movements for the prototype I was\r\n      implementing.")},l(t){e=g(t,"STRONG",{});var a=u(e);n=h(a,"MinMovementAmount"),a.forEach(f),r=h(t,"\r\n      - This variable can be changed in order to get the desired effect. I found\r\n      that a value of 1 produced good movements for the prototype I was\r\n      implementing.")},m(t,a){m(t,e,a),w(e,n),m(t,r,a)},d(t){t&&f(e),t&&f(r)}}}function P(t){let e,n,y,v,b,T,j,I,R,A,S;return I=new x({props:{title:"Velocity",$$slots:{default:[G]},$$scope:{ctx:t}}}),A=new x({props:{title:"Note",$$slots:{default:[k]},$$scope:{ctx:t}}}),{c(){e=d("Each Update() the\r\n    "),n=p("strong"),y=d("Velocity"),v=d('\r\n    (Vector3) of the object is taken . This value is then passed to the animator\r\n    (if one exists) which sets the specified movement float ("\r\n    '),b=p("strong"),T=d("Forward"),j=d('\r\n    " in my example)\r\n    '),r(I.$$.fragment),R=a(),r(A.$$.fragment)},l(t){e=h(t,"Each Update() the\r\n    "),n=g(t,"STRONG",{});var r=u(n);y=h(r,"Velocity"),r.forEach(f),v=h(t,'\r\n    (Vector3) of the object is taken . This value is then passed to the animator\r\n    (if one exists) which sets the specified movement float ("\r\n    '),b=g(t,"STRONG",{});var a=u(b);T=h(a,"Forward"),a.forEach(f),j=h(t,'\r\n    " in my example)\r\n    '),o(I.$$.fragment,t),R=s(t),o(A.$$.fragment,t)},m(t,r){m(t,e,r),m(t,n,r),w(n,y),m(t,v,r),m(t,b,r),w(b,T),m(t,j,r),i(I,t,r),m(t,R,r),i(A,t,r),S=!0},p(t,e){const n={};8&e&&(n.$$scope={dirty:e,ctx:t}),I.$set(n);const r={};8&e&&(r.$$scope={dirty:e,ctx:t}),A.$set(r)},i(t){S||(c(I.$$.fragment,t),c(A.$$.fragment,t),S=!0)},o(t){$(I.$$.fragment,t),$(A.$$.fragment,t),S=!1},d(t){t&&f(e),t&&f(n),t&&f(v),t&&f(b),t&&f(j),l(I,t),t&&f(R),l(A,t)}}}function E(t){let e;return{c(){e=d("Simply attach this script to your object that contains your character. Good\r\n    luck, let me know in the comments if anything needs explaining or if this\r\n    does not work for you :)")},l(t){e=h(t,"Simply attach this script to your object that contains your character. Good\r\n    luck, let me know in the comments if anything needs explaining or if this\r\n    does not work for you :)")},m(t,n){m(t,e,n)},d(t){t&&f(e)}}}function F(t){let e,n,y,v,b,G,k,F,N,O,V,M,B,_,U,K,W,q,H,J,z,D,L,Q,X,Y,Z,tt,et,nt,rt,at,ot,st,it,mt,ct,$t,lt;return n=new T({props:{id:"187484099"}}),v=new x({props:{title:"Position and Rotation only",$$slots:{default:[R]},$$scope:{ctx:t}}}),G=new I({props:{title:"How to",$$slots:{default:[A]},$$scope:{ctx:t}}}),K=new j({props:{useThumbnail:!1,images:["/content/blog/images/unity3d-animation-from-transform/Standard_asset_Animator_Robot_kyle.png"]}}),J=new I({props:{title:"Animation States and Variables",$$slots:{default:[S]},$$scope:{ctx:t}}}),Z=new j({props:{useThumbnail:!1,images:["/content/blog/images/unity3d-animation-from-transform/ThirdPersonAnimatorController.png"]}}),st=new I({props:{title:"The Code",$$slots:{default:[C]},$$scope:{ctx:t}}}),mt=new I({props:{title:"Explanation",$$slots:{default:[P]},$$scope:{ctx:t}}}),$t=new I({props:{title:"Usage",$$slots:{default:[E]},$$scope:{ctx:t}}}),{c(){e=d("In this post I will try to explain how I implemented simple auto animation for\r\n  my characters based on their changing position in the scene (using mecanim and\r\n  a simple script).\r\n  "),r(n.$$.fragment),y=a(),r(v.$$.fragment),b=a(),r(G.$$.fragment),k=d("\r\n  In my example I have used the classic unity model of\r\n  "),F=p("strong"),N=d("Kyle the Robot"),O=d("\r\n  and the standard\r\n  "),V=p("strong"),M=d("ThirdPersonAnimatorController"),B=d("\r\n  (Any model and controller will do).\r\n  "),_=p("br"),U=a(),r(K.$$.fragment),W=a(),q=p("br"),H=a(),r(J.$$.fragment),z=d("\r\n  The variable we are interested in is\r\n  "),D=p("strong"),L=d("Forward"),Q=d("\r\n  .\r\n  "),X=p("br"),Y=a(),r(Z.$$.fragment),tt=a(),et=p("br"),nt=d("\r\n  The value of\r\n  "),rt=p("strong"),at=d("Forward"),ot=d("\r\n  will determine the walk/run animation that mecanim wil animate for us.\r\n  "),r(st.$$.fragment),it=a(),r(mt.$$.fragment),ct=a(),r($t.$$.fragment)},l(t){e=h(t,"In this post I will try to explain how I implemented simple auto animation for\r\n  my characters based on their changing position in the scene (using mecanim and\r\n  a simple script).\r\n  "),o(n.$$.fragment,t),y=s(t),o(v.$$.fragment,t),b=s(t),o(G.$$.fragment,t),k=h(t,"\r\n  In my example I have used the classic unity model of\r\n  "),F=g(t,"STRONG",{});var r=u(F);N=h(r,"Kyle the Robot"),r.forEach(f),O=h(t,"\r\n  and the standard\r\n  "),V=g(t,"STRONG",{});var a=u(V);M=h(a,"ThirdPersonAnimatorController"),a.forEach(f),B=h(t,"\r\n  (Any model and controller will do).\r\n  "),_=g(t,"BR",{}),U=s(t),o(K.$$.fragment,t),W=s(t),q=g(t,"BR",{}),H=s(t),o(J.$$.fragment,t),z=h(t,"\r\n  The variable we are interested in is\r\n  "),D=g(t,"STRONG",{});var i=u(D);L=h(i,"Forward"),i.forEach(f),Q=h(t,"\r\n  .\r\n  "),X=g(t,"BR",{}),Y=s(t),o(Z.$$.fragment,t),tt=s(t),et=g(t,"BR",{}),nt=h(t,"\r\n  The value of\r\n  "),rt=g(t,"STRONG",{});var m=u(rt);at=h(m,"Forward"),m.forEach(f),ot=h(t,"\r\n  will determine the walk/run animation that mecanim wil animate for us.\r\n  "),o(st.$$.fragment,t),it=s(t),o(mt.$$.fragment,t),ct=s(t),o($t.$$.fragment,t)},m(t,r){m(t,e,r),i(n,t,r),m(t,y,r),i(v,t,r),m(t,b,r),i(G,t,r),m(t,k,r),m(t,F,r),w(F,N),m(t,O,r),m(t,V,r),w(V,M),m(t,B,r),m(t,_,r),m(t,U,r),i(K,t,r),m(t,W,r),m(t,q,r),m(t,H,r),i(J,t,r),m(t,z,r),m(t,D,r),w(D,L),m(t,Q,r),m(t,X,r),m(t,Y,r),i(Z,t,r),m(t,tt,r),m(t,et,r),m(t,nt,r),m(t,rt,r),w(rt,at),m(t,ot,r),i(st,t,r),m(t,it,r),i(mt,t,r),m(t,ct,r),i($t,t,r),lt=!0},p(t,e){const n={};8&e&&(n.$$scope={dirty:e,ctx:t}),v.$set(n);const r={};8&e&&(r.$$scope={dirty:e,ctx:t}),G.$set(r);const a={};8&e&&(a.$$scope={dirty:e,ctx:t}),J.$set(a);const o={};9&e&&(o.$$scope={dirty:e,ctx:t}),st.$set(o);const s={};8&e&&(s.$$scope={dirty:e,ctx:t}),mt.$set(s);const i={};8&e&&(i.$$scope={dirty:e,ctx:t}),$t.$set(i)},i(t){lt||(c(n.$$.fragment,t),c(v.$$.fragment,t),c(G.$$.fragment,t),c(K.$$.fragment,t),c(J.$$.fragment,t),c(Z.$$.fragment,t),c(st.$$.fragment,t),c(mt.$$.fragment,t),c($t.$$.fragment,t),lt=!0)},o(t){$(n.$$.fragment,t),$(v.$$.fragment,t),$(G.$$.fragment,t),$(K.$$.fragment,t),$(J.$$.fragment,t),$(Z.$$.fragment,t),$(st.$$.fragment,t),$(mt.$$.fragment,t),$($t.$$.fragment,t),lt=!1},d(t){t&&f(e),l(n,t),t&&f(y),l(v,t),t&&f(b),l(G,t),t&&f(k),t&&f(F),t&&f(O),t&&f(V),t&&f(B),t&&f(_),t&&f(U),l(K,t),t&&f(W),t&&f(q),t&&f(H),l(J,t),t&&f(z),t&&f(D),t&&f(Q),t&&f(X),t&&f(Y),l(Z,t),t&&f(tt),t&&f(et),t&&f(nt),t&&f(rt),t&&f(ot),l(st,t),t&&f(it),l(mt,t),t&&f(ct),l($t,t)}}}function N(t){let e,n,d,p;return e=new y({props:{title:V,tags:t[1],projects:t[2]}}),d=new v({props:{$$slots:{default:[F]},$$scope:{ctx:t}}}),{c(){r(e.$$.fragment),n=a(),r(d.$$.fragment)},l(t){o(e.$$.fragment,t),n=s(t),o(d.$$.fragment,t)},m(t,r){i(e,t,r),m(t,n,r),i(d,t,r),p=!0},p(t,[e]){const n={};9&e&&(n.$$scope={dirty:e,ctx:t}),d.$set(n)},i(t){p||(c(e.$$.fragment,t),c(d.$$.fragment,t),p=!0)},o(t){$(e.$$.fragment,t),$(d.$$.fragment,t),p=!1},d(t){l(e,t),t&&f(n),l(d,t)}}}async function O({params:t,query:e}){let n=await this.fetch("https://gist.githubusercontent.com/Gaweph/4cc5359a43d724a534ddc6efc82cc58d/raw/a93809baf23738dba70d1f39295f0028ee3eb594/AnimationFromTransform.cs");return{gistContents:await n.text()}}const V="Mecanim Animation From Transform";function M(t,e,n){let{gistContents:r}=e;return t.$$set=t=>{"gistContents"in t&&n(0,r=t.gistContents)},[r,["software","unity3d"],[]]}export default class extends t{constructor(t){super(),e(this,t,M,N,n,{gistContents:0})}}export{O as preload};
//# sourceMappingURL=unity3d-animation-from-transform.svelte-f9f19693.js.map
