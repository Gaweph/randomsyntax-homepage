import{S as e,i as t,s as n,c as a,a as r,k as o,g as s,p as i,n as c,r as d,u as m,v as l,j as p,t as $,h as f,q as h,e as g,d as u,f as y,o as v}from"./start-b48a7065.js";import{P as w,a as b}from"./Post-Contents.svelte-1675712b.js";import{P as R}from"./PrismJS.svelte-010aca92.js";import{C as T}from"./Callout.svelte-0a50608f.js";import{V as D}from"./Vimeo.svelte-721e8b6a.js";import{P as x}from"./Post-Section.svelte-2d21e682.js";import{L as I}from"./Link-External.svelte-f5c7bc08.js";import"./Post-Tags-Projects.svelte-aa0372bf.js";import"./Icon.svelte-bc85ecd4.js";import"./free-solid-svg-icons-650f6a7f.js";function S(e){let t,n,r;return n=new R({props:{language:"csharp",header:"RecordingData.cs",code:"\npublic class RecordingData\n{    \n    public float RecordedRate { get; set; }\n    private List<RecordData> recordedData = new List<RecordData>();\n\n    public struct RecordData\n    {\n        public Vector3 Position { get; set; }\n        public Quaternion Rotation { get; set; }\n    }\n\n    public void AddDataLine(RecordData data)\n    {\n        recordedData.Add(data);\n    }\n\n    public int pointer = 0;\n    public void MoveToStartOfData()\n    {\n        pointer = 0;\n    }\n\n    public RecordData? GetNextDataLine()\n    {\n        var count = recordedData.Count;\n        RecordData? data = null;\n        if (count > 0 && pointer < count && pointer >= 0) // not empty and pointer is within range and pointer not negative\n        {\n            data = recordedData[pointer];\n        }        \n        pointer++;\n        return data;\n    }\n}"}}),{c(){t=$("The first thing we need to do is to record our players movement. The easiest\r\n    thing to do seems to be to record the players position and rotation\r\n    (Transform). For this we create an object which will be used to hold the\r\n    recorded information.\r\n    "),a(n.$$.fragment)},l(e){t=f(e,"The first thing we need to do is to record our players movement. The easiest\r\n    thing to do seems to be to record the players position and rotation\r\n    (Transform). For this we create an object which will be used to hold the\r\n    recorded information.\r\n    "),o(n.$$.fragment,e)},m(e,a){c(e,t,a),i(n,e,a),r=!0},p:h,i(e){r||(d(n.$$.fragment,e),r=!0)},o(e){m(n.$$.fragment,e),r=!1},d(e){e&&p(t),l(n,e)}}}function k(e){let t,n,a,r;return{c(){t=$("This can be extended to record more information in the future (maybe\r\n    "),n=g("strong"),a=$("Scale"),r=$("\r\n    ?)")},l(e){t=f(e,"This can be extended to record more information in the future (maybe\r\n    "),n=u(e,"STRONG",{});var o=y(n);a=f(o,"Scale"),o.forEach(p),r=f(e,"\r\n    ?)")},m(e,o){c(e,t,o),c(e,n,o),v(n,a),c(e,r,o)},d(e){e&&p(t),e&&p(n),e&&p(r)}}}function P(e){let t,n,a;return{c(){t=g("strong"),n=$("DoRecording"),a=$("\r\n    can be set to false to stop recording.")},l(e){t=u(e,"STRONG",{});var r=y(t);n=f(r,"DoRecording"),r.forEach(p),a=f(e,"\r\n    can be set to false to stop recording.")},m(e,r){c(e,t,r),v(t,n),c(e,a,r)},d(e){e&&p(t),e&&p(a)}}}function L(e){let t,n,r,s,w,b,T,D,x,I,S,k,P,L,O;return n=new R({props:{language:"csharp",header:"Playback Coroutine",code:"\npublic bool DoPlayback = true;\npublic void StartPlayback()\n{\n    DoPlayback = true;\n    recordingData.MoveToStartOfData(); //Move to start of playback\n    StartCoroutine(PlaybackTimer());\n}"}}),s=new R({props:{language:"csharp",header:"Playback Loop",code:"\n//PLAYBACK LOOP\nIEnumerator PlaybackTimer()\n{\n    while (DoPlayback) // Repeat Until DoPlayback is false\n    {\n        NextSnapshot();\n        yield return new WaitForSeconds(recordingData.RecordedRate / Time.timeScale);\n    }\n}"}}),x=new R({props:{language:"csharp",header:"NextSnapshot()",code:"\nprivate RecordingData.RecordData? _desiredMoveLocation = null;\n\n//MOVE DESIRED LOCATION TO NEXT LOCATION\nprivate void NextSnapshot()\n{\n    var data = recordingData.GetNextDataLine();\n\n    if (_desiredMoveLocation.HasValue && !data.HasValue) //If we previously had move location and now we do not\n    {\n        //END OF REPLAY - YOU MAY WANT TO REMOVE THE REPLAY OBJECT FROM SCENE NOW\n    }\n    _desiredMoveLocation = data;\n}"}}),L=new R({props:{language:"csharp",header:"Move Object",code:"\npublic void Update()\n{\n    if (_desiredMoveLocation.HasValue)\n    {\n        var playbackRate = recordingData.RecordedRate;\n        var amount = Math.Abs(Time.deltaTime) / playbackRate;\n        var p = Vector3.Lerp(Transform.position, _desiredMoveLocation.Value.Position, amount);\n        var r = Quaternion.Lerp(Transform.rotation, _desiredMoveLocation.Value.Rotation, amount);\n\n        Transform.position = p;\n        Transform.rotation = r;\n    }\n}"}}),{c(){t=$("Then we just need to play this data back. Again this is done with a\r\n    coroutine.\r\n    "),a(n.$$.fragment),r=$("\r\n    This is the same as the recording loop except it calls Next SnapShot().\r\n    "),a(s.$$.fragment),w=$("\r\n    The\r\n    "),b=g("strong"),T=$("NextSnapshot"),D=$("\r\n    method simply retrieves the desired transform of the object.\r\n    "),a(x.$$.fragment),I=$("\r\n    We then move the object each update frame using the\r\n    "),S=g("strong"),k=$("Lerp"),P=$("\r\n    function (this helps keep the movement smooth).\r\n    "),a(L.$$.fragment)},l(e){t=f(e,"Then we just need to play this data back. Again this is done with a\r\n    coroutine.\r\n    "),o(n.$$.fragment,e),r=f(e,"\r\n    This is the same as the recording loop except it calls Next SnapShot().\r\n    "),o(s.$$.fragment,e),w=f(e,"\r\n    The\r\n    "),b=u(e,"STRONG",{});var a=y(b);T=f(a,"NextSnapshot"),a.forEach(p),D=f(e,"\r\n    method simply retrieves the desired transform of the object.\r\n    "),o(x.$$.fragment,e),I=f(e,"\r\n    We then move the object each update frame using the\r\n    "),S=u(e,"STRONG",{});var i=y(S);k=f(i,"Lerp"),i.forEach(p),P=f(e,"\r\n    function (this helps keep the movement smooth).\r\n    "),o(L.$$.fragment,e)},m(e,a){c(e,t,a),i(n,e,a),c(e,r,a),i(s,e,a),c(e,w,a),c(e,b,a),v(b,T),c(e,D,a),i(x,e,a),c(e,I,a),c(e,S,a),v(S,k),c(e,P,a),i(L,e,a),O=!0},p:h,i(e){O||(d(n.$$.fragment,e),d(s.$$.fragment,e),d(x.$$.fragment,e),d(L.$$.fragment,e),O=!0)},o(e){m(n.$$.fragment,e),m(s.$$.fragment,e),m(x.$$.fragment,e),m(L.$$.fragment,e),O=!1},d(e){e&&p(t),l(n,e),e&&p(r),l(s,e),e&&p(w),e&&p(b),e&&p(D),l(x,e),e&&p(I),e&&p(S),e&&p(P),l(L,e)}}}function O(e){let t,n,a,r,o;return{c(){t=$("There are many many ways of doing this. I am outlining how I did it.\r\n    "),n=g("br"),a=$("\r\n    I have simplified my implementation for the purposes of this post (to\r\n    outline roughly how it was done).\r\n    "),r=g("br"),o=$("\r\n    Any feedback or improvements are welcome :)")},l(e){t=f(e,"There are many many ways of doing this. I am outlining how I did it.\r\n    "),n=u(e,"BR",{}),a=f(e,"\r\n    I have simplified my implementation for the purposes of this post (to\r\n    outline roughly how it was done).\r\n    "),r=u(e,"BR",{}),o=f(e,"\r\n    Any feedback or improvements are welcome :)")},m(e,s){c(e,t,s),c(e,n,s),c(e,a,s),c(e,r,s),c(e,o,s)},d(e){e&&p(t),e&&p(n),e&&p(a),e&&p(r),e&&p(o)}}}function N(e){let t;return{c(){t=$("Unity3d Forum WIP post")},l(e){t=f(e,"Unity3d Forum WIP post")},m(e,n){c(e,t,n)},d(e){e&&p(t)}}}function j(e){let t,n,r,s,h;return n=new I({props:{href:"https://forum.unity3d.com/threads/wip-time-game-time-travel.435684/",$$slots:{default:[N]},$$scope:{ctx:e}}}),{c(){t=$("Feel free to ask me anything (I have overlooked some internal workings in\r\n    this post). I also have a\r\n    "),a(n.$$.fragment),r=$("\r\n    for this game prototype (in progress).\r\n    "),s=g("br")},l(e){t=f(e,"Feel free to ask me anything (I have overlooked some internal workings in\r\n    this post). I also have a\r\n    "),o(n.$$.fragment,e),r=f(e,"\r\n    for this game prototype (in progress).\r\n    "),s=u(e,"BR",{})},m(e,a){c(e,t,a),i(n,e,a),c(e,r,a),c(e,s,a),h=!0},p(e,t){const a={};4&t&&(a.$$scope={dirty:t,ctx:e}),n.$set(a)},i(e){h||(d(n.$$.fragment,e),h=!0)},o(e){m(n.$$.fragment,e),h=!1},d(e){e&&p(t),l(n,e),e&&p(r),e&&p(s)}}}function E(e){let t,n,a;return{c(){t=$("I have not gone into any detail on how the replay data can be saved and\r\n    loaded between games (I have implemented this in my prototype).\r\n    "),n=g("br"),a=$("\r\n    I can try and write a post outlining this if this is of interest?")},l(e){t=f(e,"I have not gone into any detail on how the replay data can be saved and\r\n    loaded between games (I have implemented this in my prototype).\r\n    "),n=u(e,"BR",{}),a=f(e,"\r\n    I can try and write a post outlining this if this is of interest?")},m(e,r){c(e,t,r),c(e,n,r),c(e,a,r)},d(e){e&&p(t),e&&p(n),e&&p(a)}}}function A(e){let t,n,h,g,u,y,v,w,b,I,N,A,M,C,W,V,F,G,U,B,_;return n=new D({props:{id:"186188380"}}),g=new x({props:{title:"Record",$$slots:{default:[S]},$$scope:{ctx:e}}}),y=new T({props:{title:"Note",$$slots:{default:[k]},$$scope:{ctx:e}}}),w=new R({props:{language:"csharp",header:"TakeSnapShot()",code:"private RecordingData recordingData = new RecordingData();\npublic void TakeSnapshot()\n{\n    var t = Transform;\n    var data = new RecordData()\n    {\n        Position = t.position,\n        Rotation = t.rotation\n    };\n    recordingData.AddDataLine(data);    \n}"}}),I=new R({props:{language:"csharp",header:"Record Coroutine",code:"\npublic bool DoRecording = true;\nvoid StartRecording()\n{\n    DoRecording = true;\n    StartCoroutine(RecordingTimer(0.05f, 0f));\n}\n\n//RECORDING LOOP\nIEnumerator RecordingTimer(float sampleRate)\n{\n    recordingData.RecordedRate = sampleRate;\n    while (DoRecording) // Repeat until DoRecording is false\n    {\n        TakeSnapshot();\n        yield return new WaitForSeconds(recordingData.RecordedRate / Time.timeScale);\n    }\n}"}}),A=new T({props:{title:"Note",$$slots:{default:[P]},$$scope:{ctx:e}}}),C=new x({props:{title:"Replay",$$slots:{default:[L]},$$scope:{ctx:e}}}),V=new T({props:{title:"This is not the only way",$$slots:{default:[O]},$$scope:{ctx:e}}}),G=new T({props:{title:"Have a question?",$$slots:{default:[j]},$$scope:{ctx:e}}}),B=new T({props:{title:"More Info?",$$slots:{default:[E]},$$scope:{ctx:e}}}),{c(){t=$("This is my current progress of a time travel puzzle game created with Unity3D\r\n  "),a(n.$$.fragment),h=$("\r\n  I will briefly outline how I implemented time travel in Unity3d. As the title\r\n  suggests, this method will be the same if you are trying to create some sort\r\n  of replay system.\r\n  "),a(g.$$.fragment),u=r(),a(y.$$.fragment),v=$("\r\n  We then need to call a method which records the data.\r\n  "),a(w.$$.fragment),b=$("\r\n  We need to call the **TakeSnapshot** method at a known interval. I have used\r\n  coroutines to ensure a consistent sample of data. In the below example we are\r\n  using **0.05 seconds** which is a rate of 20fps. This seems to offer a smooth\r\n  enough playback rate (discussed later in this article).\r\n  "),a(I.$$.fragment),N=r(),a(A.$$.fragment),M=r(),a(C.$$.fragment),W=r(),a(V.$$.fragment),F=r(),a(G.$$.fragment),U=r(),a(B.$$.fragment)},l(e){t=f(e,"This is my current progress of a time travel puzzle game created with Unity3D\r\n  "),o(n.$$.fragment,e),h=f(e,"\r\n  I will briefly outline how I implemented time travel in Unity3d. As the title\r\n  suggests, this method will be the same if you are trying to create some sort\r\n  of replay system.\r\n  "),o(g.$$.fragment,e),u=s(e),o(y.$$.fragment,e),v=f(e,"\r\n  We then need to call a method which records the data.\r\n  "),o(w.$$.fragment,e),b=f(e,"\r\n  We need to call the **TakeSnapshot** method at a known interval. I have used\r\n  coroutines to ensure a consistent sample of data. In the below example we are\r\n  using **0.05 seconds** which is a rate of 20fps. This seems to offer a smooth\r\n  enough playback rate (discussed later in this article).\r\n  "),o(I.$$.fragment,e),N=s(e),o(A.$$.fragment,e),M=s(e),o(C.$$.fragment,e),W=s(e),o(V.$$.fragment,e),F=s(e),o(G.$$.fragment,e),U=s(e),o(B.$$.fragment,e)},m(e,a){c(e,t,a),i(n,e,a),c(e,h,a),i(g,e,a),c(e,u,a),i(y,e,a),c(e,v,a),i(w,e,a),c(e,b,a),i(I,e,a),c(e,N,a),i(A,e,a),c(e,M,a),i(C,e,a),c(e,W,a),i(V,e,a),c(e,F,a),i(G,e,a),c(e,U,a),i(B,e,a),_=!0},p(e,t){const n={};4&t&&(n.$$scope={dirty:t,ctx:e}),g.$set(n);const a={};4&t&&(a.$$scope={dirty:t,ctx:e}),y.$set(a);const r={};4&t&&(r.$$scope={dirty:t,ctx:e}),A.$set(r);const o={};4&t&&(o.$$scope={dirty:t,ctx:e}),C.$set(o);const s={};4&t&&(s.$$scope={dirty:t,ctx:e}),V.$set(s);const i={};4&t&&(i.$$scope={dirty:t,ctx:e}),G.$set(i);const c={};4&t&&(c.$$scope={dirty:t,ctx:e}),B.$set(c)},i(e){_||(d(n.$$.fragment,e),d(g.$$.fragment,e),d(y.$$.fragment,e),d(w.$$.fragment,e),d(I.$$.fragment,e),d(A.$$.fragment,e),d(C.$$.fragment,e),d(V.$$.fragment,e),d(G.$$.fragment,e),d(B.$$.fragment,e),_=!0)},o(e){m(n.$$.fragment,e),m(g.$$.fragment,e),m(y.$$.fragment,e),m(w.$$.fragment,e),m(I.$$.fragment,e),m(A.$$.fragment,e),m(C.$$.fragment,e),m(V.$$.fragment,e),m(G.$$.fragment,e),m(B.$$.fragment,e),_=!1},d(e){e&&p(t),l(n,e),e&&p(h),l(g,e),e&&p(u),l(y,e),e&&p(v),l(w,e),e&&p(b),l(I,e),e&&p(N),l(A,e),e&&p(M),l(C,e),e&&p(W),l(V,e),e&&p(F),l(G,e),e&&p(U),l(B,e)}}}function M(e){let t,n,$,f;return t=new w({props:{title:C,tags:e[0],projects:e[1]}}),$=new b({props:{$$slots:{default:[A]},$$scope:{ctx:e}}}),{c(){a(t.$$.fragment),n=r(),a($.$$.fragment)},l(e){o(t.$$.fragment,e),n=s(e),o($.$$.fragment,e)},m(e,a){i(t,e,a),c(e,n,a),i($,e,a),f=!0},p(e,[t]){const n={};4&t&&(n.$$scope={dirty:t,ctx:e}),$.$set(n)},i(e){f||(d(t.$$.fragment,e),d($.$$.fragment,e),f=!0)},o(e){m(t.$$.fragment,e),m($.$$.fragment,e),f=!1},d(e){l(t,e),e&&p(n),l($,e)}}}const C="Time Game 1 - Implementing Time Travel";function W(e){return[["software","unity3d"],["Time Travel Game"]]}export default class extends e{constructor(e){super(),t(this,e,W,M,n,{})}}
//# sourceMappingURL=timegame-1-timetravel.svelte-9ef61152.js.map
