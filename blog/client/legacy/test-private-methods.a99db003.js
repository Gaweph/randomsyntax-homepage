import{a as e,b as t,c as n,d as a,i as r,s as o,e as s,S as i,f as c,k as m,g as u,o as l,m as f,p as h,u as g,t as $,h as d,j as p,n as w,z as v,C as b,G as y,y as R,A as N}from"./client.a8955c19.js";import"./Tag.8409b12c.js";import"./Post-Tags-Projects.e09515f9.js";import{P as j,a as k}from"./Post-Contents.d58d3f5b.js";import{P}from"./Post-Section.da5d699e.js";import{P as x}from"./PrismJS.f25a35c3.js";import{C as T}from"./Callout.84eaec23.js";function M(e){var a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,o=t(e);if(a){var s=t(this).constructor;r=Reflect.construct(o,arguments,s)}else r=o.apply(this,arguments);return n(this,r)}}function F(e){var t,n,a,r=new x({props:{language:"csharp",code:'using System;\nusing System.Reflection;\nnamespace TestUtilities\n{\n    public static class TestHelpers\n    {\n        public static object RunPrivateMethod(this object obj, string methodName, params object[] args)\n        {\n            var method = obj\n                .GetType()\n                .GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance);\n            if (method == null)\n            {\n                throw new ArgumentException(\n                    $"{obj.GetType()} does not contain the method {methodName}", \n                    "methodName"\n                );\n            }\n            return method.Invoke(obj, args);\n        }\n    }\n}'}}),o=new x({props:{language:"csharp",code:'var res1 = testObject.RunPrivateMethod("SecretInternalMethod");\nvar res2 = testObject.RunPrivateMethod("SecretInternalMethodWithArgs", arg1, arg2);'}});return{c:function(){t=v("Need the solution in the hurry?  Here you go:\r\n  "),c(r.$$.fragment),n=v("\r\nUse it like this\r\n"),c(o.$$.fragment)},l:function(e){t=b(e,"Need the solution in the hurry?  Here you go:\r\n  "),u(r.$$.fragment,e),n=b(e,"\r\nUse it like this\r\n"),u(o.$$.fragment,e)},m:function(e,s){h(e,t,s),f(r,e,s),h(e,n,s),f(o,e,s),a=!0},p:y,i:function(e){a||($(r.$$.fragment,e),$(o.$$.fragment,e),a=!0)},o:function(e){d(r.$$.fragment,e),d(o.$$.fragment,e),a=!1},d:function(e){e&&w(t),p(r,e),e&&w(n),p(o,e)}}}function S(e){var t;return{c:function(){t=v("Running logic inside of private method suggests that the code should be refactored (maybe moved to a helper class or a service layer).  \r\nThe fact is that sometimes we need to test existing/legacy code or for a number of reasons the logic is in a private method and we need to test it.")},l:function(e){t=b(e,"Running logic inside of private method suggests that the code should be refactored (maybe moved to a helper class or a service layer).  \r\nThe fact is that sometimes we need to test existing/legacy code or for a number of reasons the logic is in a private method and we need to test it.")},m:function(e,n){h(e,t,n)},d:function(e){e&&w(t)}}}function B(e){var t,n,a,r,o,s,i,m,l,g,y,j,k,P,M,F,B=new T({props:{title:"Great, I can test my private methods.  But should I?",$$slots:{default:[S]},$$scope:{ctx:e}}}),G=new x({props:{language:"csharp",inline:"true",code:"System.Reflection"}}),A=new x({props:{language:"csharp",inline:"true",code:"RunPrivateMethod()"}}),I=new x({props:{language:"csharp",inline:"true",code:"BindingFlags.NonPublic | BindingFlags.Instance"}}),L=new x({props:{language:"csharp",inline:"true",code:"MethodInfo"}});return{c:function(){t=v("We have a class with some internal code that we would like to run in isolation to test that it is doing what we think it is doing.  \r\n"),n=R("br"),a=R("br"),r=v("\r\nI know there are many arguments to  be made as to whether we should be doing this.  Many will suggest that having lots of logic in a private method means that it should probably be refactored into a helper class or service layer,  \r\nwhile this is true in some cases the fact is that sometimes we have some code in a class (legacy code) and we want to test it.\r\n\r\n"),c(B.$$.fragment),o=v("\r\n\r\nThe main probelm we have is that if we make an instance of a class we just don't have access to its private stuff from the outside.  \r\nLuckily for us the "),c(G.$$.fragment),s=v(" namespace can help us get access to the private members and invoke them.\r\n\r\n"),i=R("br"),m=R("br"),l=v("\r\n\r\nThe above solution is an extension method that  allows any object to call "),c(A.$$.fragment),g=v(".\r\n"),y=R("br"),j=R("br"),k=v("\r\n\r\nThe magic happens mainly with "),c(I.$$.fragment),P=v(" \r\nwhich allows us to use reflection to get the "),c(L.$$.fragment),M=v(" for the specified private method.")},l:function(e){t=b(e,"We have a class with some internal code that we would like to run in isolation to test that it is doing what we think it is doing.  \r\n"),n=N(e,"BR",{}),a=N(e,"BR",{}),r=b(e,"\r\nI know there are many arguments to  be made as to whether we should be doing this.  Many will suggest that having lots of logic in a private method means that it should probably be refactored into a helper class or service layer,  \r\nwhile this is true in some cases the fact is that sometimes we have some code in a class (legacy code) and we want to test it.\r\n\r\n"),u(B.$$.fragment,e),o=b(e,"\r\n\r\nThe main probelm we have is that if we make an instance of a class we just don't have access to its private stuff from the outside.  \r\nLuckily for us the "),u(G.$$.fragment,e),s=b(e," namespace can help us get access to the private members and invoke them.\r\n\r\n"),i=N(e,"BR",{}),m=N(e,"BR",{}),l=b(e,"\r\n\r\nThe above solution is an extension method that  allows any object to call "),u(A.$$.fragment,e),g=b(e,".\r\n"),y=N(e,"BR",{}),j=N(e,"BR",{}),k=b(e,"\r\n\r\nThe magic happens mainly with "),u(I.$$.fragment,e),P=b(e," \r\nwhich allows us to use reflection to get the "),u(L.$$.fragment,e),M=b(e," for the specified private method.")},m:function(e,c){h(e,t,c),h(e,n,c),h(e,a,c),h(e,r,c),f(B,e,c),h(e,o,c),f(G,e,c),h(e,s,c),h(e,i,c),h(e,m,c),h(e,l,c),f(A,e,c),h(e,g,c),h(e,y,c),h(e,j,c),h(e,k,c),f(I,e,c),h(e,P,c),f(L,e,c),h(e,M,c),F=!0},p:function(e,t){var n={};4&t&&(n.$$scope={dirty:t,ctx:e}),B.$set(n)},i:function(e){F||($(B.$$.fragment,e),$(G.$$.fragment,e),$(A.$$.fragment,e),$(I.$$.fragment,e),$(L.$$.fragment,e),F=!0)},o:function(e){d(B.$$.fragment,e),d(G.$$.fragment,e),d(A.$$.fragment,e),d(I.$$.fragment,e),d(L.$$.fragment,e),F=!1},d:function(e){e&&w(t),e&&w(n),e&&w(a),e&&w(r),p(B,e),e&&w(o),p(G,e),e&&w(s),e&&w(i),e&&w(m),e&&w(l),p(A,e),e&&w(g),e&&w(y),e&&w(j),e&&w(k),p(I,e),e&&w(P),p(L,e),e&&w(M)}}}function G(e){var t,n,a=new x({props:{language:"csharp",code:'public class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n\n    private string GetFullName() // <-- Private Method\n    {\n        return $"{FirstName} {LastName}";\n    }\n\n    private string GetFullNameWithNickname(string nickname) // <-- Private Method\n    {\n        return $"{FirstName} \'{nickname}\' {LastName}";\n    }\n}\n[Fact]\npublic void GetFullName__Should_Return_ExpectedResult()\n{\n    // ARRANGE\n    var test = new Person { FirstName = "Ace", LastName = "Rimmer" };\n    // ACT\n    var name = test.RunPrivateMethod("GetFullName"); // <-- name of method\n    var nickname = test.RunPrivateMethod("GetFullNameWithNickname", "what a guy!"); // <-- with args\n    // ASSERT\n    name.Should().Be("Ace Rimmer");\n    nickname.Should().Be("Ace \'what a guy!\' Rimmer");\n}'}});return{c:function(){t=v("The following usage example shows how this would be used in a unit test\r\n\r\n"),c(a.$$.fragment)},l:function(e){t=b(e,"The following usage example shows how this would be used in a unit test\r\n\r\n"),u(a.$$.fragment,e)},m:function(e,r){h(e,t,r),f(a,e,r),n=!0},p:y,i:function(e){n||($(a.$$.fragment,e),n=!0)},o:function(e){d(a.$$.fragment,e),n=!1},d:function(e){e&&w(t),p(a,e)}}}function A(e){var t,n,a,r=new P({props:{title:"TL;DR",$$slots:{default:[F]},$$scope:{ctx:e}}}),o=new P({props:{title:"Explanation",$$slots:{default:[B]},$$scope:{ctx:e}}}),s=new P({props:{title:"Usage",$$slots:{default:[G]},$$scope:{ctx:e}}});return{c:function(){c(r.$$.fragment),t=m(),c(o.$$.fragment),n=m(),c(s.$$.fragment)},l:function(e){u(r.$$.fragment,e),t=l(e),u(o.$$.fragment,e),n=l(e),u(s.$$.fragment,e)},m:function(e,i){f(r,e,i),h(e,t,i),f(o,e,i),h(e,n,i),f(s,e,i),a=!0},p:function(e,t){var n={};4&t&&(n.$$scope={dirty:t,ctx:e}),r.$set(n);var a={};4&t&&(a.$$scope={dirty:t,ctx:e}),o.$set(a);var i={};4&t&&(i.$$scope={dirty:t,ctx:e}),s.$set(i)},i:function(e){a||($(r.$$.fragment,e),$(o.$$.fragment,e),$(s.$$.fragment,e),a=!0)},o:function(e){d(r.$$.fragment,e),d(o.$$.fragment,e),d(s.$$.fragment,e),a=!1},d:function(e){p(r,e),e&&w(t),p(o,e),e&&w(n),p(s,e)}}}function I(e){var t,n,a=new j({props:{title:L,tags:e[0],projects:e[1]}}),r=new k({props:{$$slots:{default:[A]},$$scope:{ctx:e}}});return{c:function(){c(a.$$.fragment),t=m(),c(r.$$.fragment)},l:function(e){u(a.$$.fragment,e),t=l(e),u(r.$$.fragment,e)},m:function(e,o){f(a,e,o),h(e,t,o),f(r,e,o),n=!0},p:function(e,t){var n=g(t,1)[0],a={};4&n&&(a.$$scope={dirty:n,ctx:e}),r.$set(a)},i:function(e){n||($(a.$$.fragment,e),$(r.$$.fragment,e),n=!0)},o:function(e){d(a.$$.fragment,e),d(r.$$.fragment,e),n=!1},d:function(e){p(a,e),e&&w(t),p(r,e)}}}var L="Test Private Methods with C#";function C(e){return[["unit test","c-sharp"],[]]}var E=function(t){e(c,i);var n=M(c);function c(e){var t;return a(this,c),t=n.call(this),r(s(t),e,C,I,o,{}),t}return c}();export default E;
